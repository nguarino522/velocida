generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id         Int        @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  bio        String?
  firstName  String
  lastName   String
  userId     Int        @unique
  age        Int?
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts      Post[]
  votes      Vote[]
  activities Activity[]
  likes      Like[]
  comments   Comment[]
  followers  Follow[]   @relation("following")
  following  Follow[]   @relation("follower")
  Thread     Thread[]
}

model Follow {
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  followee   Profile  @relation("following", fields: [followeeId], references: [id], onDelete: Cascade)
  followeeId Int
  follower   Profile  @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId Int

  @@id([followerId, followeeId])
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  username  String   @unique
  password  String
  role      Role     @default(USER)
  profile   Profile?
}

model Activity {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  title       String
  description String
  duration    Decimal   @db.Decimal(10, 2)
  distance    Decimal   @db.Decimal(10, 2)
  ownerId     Int
  owner       Profile   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  comments    Comment[]
  likes       Like[]
}

model Comment {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  content    String
  activityId Int
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  ownerId    Int
  owner      Profile  @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model Like {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  activityId Int
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  ownerId    Int
  owner      Profile  @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model Thread {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(255)
  authorId  Int
  author    Profile  @relation(fields: [authorId], references: [id])
  posts     Post[]
}

model Post {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  content      String
  authorId     Int
  author       Profile  @relation(fields: [authorId], references: [id])
  threadId     Int
  thread       Thread   @relation(fields: [threadId], references: [id], onDelete: Cascade)
  parentPostId Int?
  votes        Vote[]
}

model Vote {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId  Int
  author    Profile  @relation(fields: [authorId], references: [id], onDelete: Cascade)
  upvote    Boolean
}

enum Role {
  ADMIN
  USER
  MODERATOR
}
